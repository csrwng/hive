// Code generated by MockGen. DO NOT EDIT.
// Source: ./hibernation_actuator.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/hive/pkg/apis/hive/v1"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockHibernationActuator is a mock of HibernationActuator interface
type MockHibernationActuator struct {
	ctrl     *gomock.Controller
	recorder *MockHibernationActuatorMockRecorder
}

// MockHibernationActuatorMockRecorder is the mock recorder for MockHibernationActuator
type MockHibernationActuatorMockRecorder struct {
	mock *MockHibernationActuator
}

// NewMockHibernationActuator creates a new mock instance
func NewMockHibernationActuator(ctrl *gomock.Controller) *MockHibernationActuator {
	mock := &MockHibernationActuator{ctrl: ctrl}
	mock.recorder = &MockHibernationActuatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHibernationActuator) EXPECT() *MockHibernationActuatorMockRecorder {
	return m.recorder
}

// CanHandle mocks base method
func (m *MockHibernationActuator) CanHandle(cd *v1.ClusterDeployment) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanHandle", cd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanHandle indicates an expected call of CanHandle
func (mr *MockHibernationActuatorMockRecorder) CanHandle(cd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanHandle", reflect.TypeOf((*MockHibernationActuator)(nil).CanHandle), cd)
}

// StopMachines mocks base method
func (m *MockHibernationActuator) StopMachines(logger logrus.FieldLogger, cd *v1.ClusterDeployment, hiveClient client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopMachines", logger, cd, hiveClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopMachines indicates an expected call of StopMachines
func (mr *MockHibernationActuatorMockRecorder) StopMachines(logger, cd, hiveClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopMachines", reflect.TypeOf((*MockHibernationActuator)(nil).StopMachines), logger, cd, hiveClient)
}

// StartMachines mocks base method
func (m *MockHibernationActuator) StartMachines(logger logrus.FieldLogger, cd *v1.ClusterDeployment, hiveClient client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMachines", logger, cd, hiveClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartMachines indicates an expected call of StartMachines
func (mr *MockHibernationActuatorMockRecorder) StartMachines(logger, cd, hiveClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMachines", reflect.TypeOf((*MockHibernationActuator)(nil).StartMachines), logger, cd, hiveClient)
}

// MachinesRunning mocks base method
func (m *MockHibernationActuator) MachinesRunning(logger logrus.FieldLogger, cd *v1.ClusterDeployment, hiveClient client.Client) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachinesRunning", logger, cd, hiveClient)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachinesRunning indicates an expected call of MachinesRunning
func (mr *MockHibernationActuatorMockRecorder) MachinesRunning(logger, cd, hiveClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachinesRunning", reflect.TypeOf((*MockHibernationActuator)(nil).MachinesRunning), logger, cd, hiveClient)
}

// MachinesStopped mocks base method
func (m *MockHibernationActuator) MachinesStopped(logger logrus.FieldLogger, cd *v1.ClusterDeployment, hiveClient client.Client) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachinesStopped", logger, cd, hiveClient)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachinesStopped indicates an expected call of MachinesStopped
func (mr *MockHibernationActuatorMockRecorder) MachinesStopped(logger, cd, hiveClient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachinesStopped", reflect.TypeOf((*MockHibernationActuator)(nil).MachinesStopped), logger, cd, hiveClient)
}
